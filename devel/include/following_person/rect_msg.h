// Generated by gencpp from file following_person/rect_msg.msg
// DO NOT EDIT!


#ifndef FOLLOWING_PERSON_MESSAGE_RECT_MSG_H
#define FOLLOWING_PERSON_MESSAGE_RECT_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace following_person
{
template <class ContainerAllocator>
struct rect_msg_
{
  typedef rect_msg_<ContainerAllocator> Type;

  rect_msg_()
    : cx(0)
    , cy(0)
    , label(0)  {
    }
  rect_msg_(const ContainerAllocator& _alloc)
    : cx(0)
    , cy(0)
    , label(0)  {
  (void)_alloc;
    }



   typedef int64_t _cx_type;
  _cx_type cx;

   typedef int64_t _cy_type;
  _cy_type cy;

   typedef int64_t _label_type;
  _label_type label;





  typedef boost::shared_ptr< ::following_person::rect_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::following_person::rect_msg_<ContainerAllocator> const> ConstPtr;

}; // struct rect_msg_

typedef ::following_person::rect_msg_<std::allocator<void> > rect_msg;

typedef boost::shared_ptr< ::following_person::rect_msg > rect_msgPtr;
typedef boost::shared_ptr< ::following_person::rect_msg const> rect_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::following_person::rect_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::following_person::rect_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::following_person::rect_msg_<ContainerAllocator1> & lhs, const ::following_person::rect_msg_<ContainerAllocator2> & rhs)
{
  return lhs.cx == rhs.cx &&
    lhs.cy == rhs.cy &&
    lhs.label == rhs.label;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::following_person::rect_msg_<ContainerAllocator1> & lhs, const ::following_person::rect_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace following_person

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::following_person::rect_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::following_person::rect_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::following_person::rect_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::following_person::rect_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::following_person::rect_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::following_person::rect_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::following_person::rect_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "048e16c767ef5ede95b8620142d8975c";
  }

  static const char* value(const ::following_person::rect_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x048e16c767ef5edeULL;
  static const uint64_t static_value2 = 0x95b8620142d8975cULL;
};

template<class ContainerAllocator>
struct DataType< ::following_person::rect_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "following_person/rect_msg";
  }

  static const char* value(const ::following_person::rect_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::following_person::rect_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 cx\n"
"int64 cy\n"
"int64 label\n"
;
  }

  static const char* value(const ::following_person::rect_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::following_person::rect_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cx);
      stream.next(m.cy);
      stream.next(m.label);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct rect_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::following_person::rect_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::following_person::rect_msg_<ContainerAllocator>& v)
  {
    s << indent << "cx: ";
    Printer<int64_t>::stream(s, indent + "  ", v.cx);
    s << indent << "cy: ";
    Printer<int64_t>::stream(s, indent + "  ", v.cy);
    s << indent << "label: ";
    Printer<int64_t>::stream(s, indent + "  ", v.label);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FOLLOWING_PERSON_MESSAGE_RECT_MSG_H
